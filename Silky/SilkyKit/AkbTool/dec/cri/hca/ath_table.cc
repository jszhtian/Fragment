// Copyright (C) 2016 by rr-
//
// This file is part of arc_unpacker.
//
// arc_unpacker is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or (at
// your option) any later version.
//
// arc_unpacker is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with arc_unpacker. If not, see <http://www.gnu.org/licenses/>.

#include "dec/cri/hca/ath_table.h"
#include "algo/range.h"
#include "err.h"

using namespace au;
using namespace au::dec::cri::hca;

static std::array<u8, 0x80> create_v0_table()
{
    std::array<u8, 0x80> table;
    for (const auto i : algo::range(table.size()))
        table[i] = 0;
    return table;
}

static std::array<u8, 0x80> create_v1_table(const u32 key)
{
    static const bstr v =
        "\x78\x5F\x56\x51\x4E\x4C\x4B\x49\x48\x48\x47\x46\x46\x45\x45\x45"
        "\x44\x44\x44\x44\x43\x43\x43\x43\x43\x43\x42\x42\x42\x42\x42\x42"
        "\x42\x42\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x40\x40\x40\x40"
        "\x40\x40\x40\x40\x40\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F"
        "\x3F\x3F\x3F\x3E\x3E\x3E\x3E\x3E\x3E\x3D\x3D\x3D\x3D\x3D\x3D\x3D"
        "\x3C\x3C\x3C\x3C\x3C\x3C\x3C\x3C\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B"
        "\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B"
        "\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3B\x3C\x3C\x3C\x3C\x3C\x3C\x3C\x3C"
        "\x3D\x3D\x3D\x3D\x3D\x3D\x3D\x3D\x3E\x3E\x3E\x3E\x3E\x3E\x3E\x3F"
        "\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F\x3F"
        "\x3F\x3F\x3F\x3F\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40\x40"
        "\x40\x40\x40\x40\x40\x40\x40\x40\x40\x41\x41\x41\x41\x41\x41\x41"
        "\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41"
        "\x41\x41\x41\x41\x41\x41\x41\x42\x42\x42\x42\x42\x42\x42\x42\x42"
        "\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x42\x43\x43\x43"
        "\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x43\x44\x44"
        "\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x44\x45\x45\x45\x45"
        "\x45\x45\x45\x45\x45\x45\x45\x45\x46\x46\x46\x46\x46\x46\x46\x46"
        "\x46\x46\x47\x47\x47\x47\x47\x47\x47\x47\x47\x47\x48\x48\x48\x48"
        "\x48\x48\x48\x48\x49\x49\x49\x49\x49\x49\x49\x49\x4A\x4A\x4A\x4A"
        "\x4A\x4A\x4A\x4A\x4B\x4B\x4B\x4B\x4B\x4B\x4B\x4C\x4C\x4C\x4C\x4C"
        "\x4C\x4D\x4D\x4D\x4D\x4D\x4D\x4E\x4E\x4E\x4E\x4E\x4E\x4F\x4F\x4F"
        "\x4F\x4F\x4F\x50\x50\x50\x50\x50\x51\x51\x51\x51\x51\x52\x52\x52"
        "\x52\x52\x53\x53\x53\x53\x54\x54\x54\x54\x54\x55\x55\x55\x55\x56"
        "\x56\x56\x56\x57\x57\x57\x57\x57\x58\x58\x58\x59\x59\x59\x59\x5A"
        "\x5A\x5A\x5A\x5B\x5B\x5B\x5B\x5C\x5C\x5C\x5D\x5D\x5D\x5D\x5E\x5E"
        "\x5E\x5F\x5F\x5F\x60\x60\x60\x61\x61\x61\x61\x62\x62\x62\x63\x63"
        "\x63\x64\x64\x64\x65\x65\x66\x66\x66\x67\x67\x67\x68\x68\x68\x69"
        "\x69\x6A\x6A\x6A\x6B\x6B\x6B\x6C\x6C\x6D\x6D\x6D\x6E\x6E\x6F\x6F"
        "\x70\x70\x70\x71\x71\x72\x72\x73\x73\x73\x74\x74\x75\x75\x76\x76"
        "\x77\x77\x78\x78\x78\x79\x79\x7A\x7A\x7B\x7B\x7C\x7C\x7D\x7D\x7E"
        "\x7E\x7F\x7F\x80\x80\x81\x81\x82\x83\x83\x84\x84\x85\x85\x86\x86"
        "\x87\x88\x88\x89\x89\x8A\x8A\x8B\x8C\x8C\x8D\x8D\x8E\x8F\x8F\x90"
        "\x90\x91\x92\x92\x93\x94\x94\x95\x95\x96\x97\x97\x98\x99\x99\x9A"
        "\x9B\x9B\x9C\x9D\x9D\x9E\x9F\xA0\xA0\xA1\xA2\xA2\xA3\xA4\xA5\xA5"
        "\xA6\xA7\xA7\xA8\xA9\xAA\xAA\xAB\xAC\xAD\xAE\xAE\xAF\xB0\xB1\xB1"
        "\xB2\xB3\xB4\xB5\xB6\xB6\xB7\xB8\xB9\xBA\xBA\xBB\xBC\xBD\xBE\xBF"
        "\xC0\xC1\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xC9\xCA\xCB\xCC\xCD"
        "\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD"
        "\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xED\xEE"
        "\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF7\xF8\xF9\xFA\xFB\xFC\xFD"_b;

    std::array<u8, 0x80> table;
    for (const auto i : algo::range(table.size()))
        table[i] = 0xFF;

    for (const auto i : algo::range(0x80))
    {
        const auto idx = (key * i) >> 13;
        if (idx >= v.size())
            break;
        table[i] = v[idx];
    }
    return table;
}

struct AthTable::Priv final
{
    std::array<u8, 0x80> table;
};

AthTable::AthTable(const u16 type, const u32 key) : p(new Priv)
{
    if (type == 0)
        p->table = create_v0_table();
    else if (type == 1)
        p->table = create_v1_table(key);
    else
        throw err::NotSupportedError("Unknown ATH table type");
}

AthTable::~AthTable()
{
}

const std::array<u8, 0x80> &AthTable::get() const
{
    return p->table;
}
